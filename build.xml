<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="ConcoursJeunes" default="auto-pack" basedir="./">
	<description>
		Generation de ConcoursJeunes
	</description>
	
	<tstamp>
		<format property="version.date" pattern="dd/MM/yyyy" />
	</tstamp>
	
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
	    <pathelement location="packager/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>
	
	<condition property="isWindows">
		<os family="Windows" />
	</condition>

	<condition property="isLinux">
		<os family="unix" name="Linux" />
	</condition>

	<available file="/usr/bin/dpkg-buildpackage" property="dpkgAvailable"/>
	<available file="/usr/bin/rpmbuild" property="rpmAvailable"/>
	<condition property="nsisAvailable">
		<or>
			<available file="/usr/bin/makensis" property="nsisAvailable"/>
			<os family="Windows" /><!-- Le chemin est malheureusement trop aléatoire sous windows -->
		</or>
	</condition>
	
	<property file="packager/version.properties" />
	<property file="packager/security.properties" />
		
	<path id="classpath">
		<pathelement location="config/" />
		<pathelement location="lang/" />
		<pathelement location="plugins/" />
		<fileset dir="${basedir}/">
			<include name="plugins/*.jar" />
			<include name="${projet.lib.dir}/*.jar" />
			<exclude name="${projet.lib.dir}/*sources.jar"/>
			<exclude name="${projet.lib.dir}/*javadoc.jar"/>
			<exclude name="${projet.lib.dir}/debug.jar"/>
		</fileset>
	</path>
	
	<!-- constructs the external libraries classpath name -->
	<pathconvert property="classpath.name" pathsep=" ">
		<path refid="classpath" />
		<mapper>
			<globmapper from="${basedir}/${projet.lib.dir}/*.jar" to="${projet.lib.dir}/*.jar" />
			<globmapper from="${basedir}/config" to="config/" />
			<globmapper from="${basedir}/lang" to="lang/" />
			<globmapper from="${basedir}/plugins" to="plugins/" />
		</mapper>
	</pathconvert>

	<import file="plugins/build-ConcoursJeunesUpdate.xml"/>
	<import file="plugins/build-ResultArcImport.xml"/>
	<import file="plugins/build-FFTAImport.xml"/>
	<import file="plugins/build-PhoenixPlugin.xml"/>
	<import file="plugins/build-BackupRestorePlugin.xml"/>
	<import file="plugins/build-ScriptExt.xml"/>
	
	<!-- install ivy -->
	<target name="ivy" description="Install ivy">
		<mkdir dir="${user.home}/.ant/lib" />
		<get dest="${user.home}/.ant/lib/ivy.jar" src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/2.5.2/ivy-2.5.2.jar" />
	</target>
	
	<!-- resolve ivy dependencies -->
	<target name="resolve" description="--> retrieve dependencies with ivy">
	    <ivy:retrieve />
	</target>


	<!--genere la documentation technique-->
	<target name="dev_doc" description="genere la documentation développeur">
		<echo message="Construction de la documentation developpeur..."/>
		<!--création du répertoire de documentation-->
		<mkdir dir="docs" />
		<javadoc
			access="package"
			additionalparam=" -encoding utf8 -docencoding utf8 -charset utf8"
			sourcepath="src"
			destdir="docs"
			classpathref="classpath">
			
			<link href="http://java.sun.com/javase/6/docs/api/" />
			<link href="http://www.ajdeveloppement.org/docs/"/>
			<!--<packageset dir="src" defaultexcludes="yes">
				<include name="**/**" />
				<exclude name="org/concoursjeunes/test/**" />
			</packageset>-->
		</javadoc>
		<echo message="Fin de la generation de la doc..."/>
	</target>

	<target name="pack_stage1">
		<mkdir dir="${projet.pack.dir}" />

		<delete includeemptydirs="true">
			<fileset dir="${projet.pack.dir}" includes="**/*"/>
		</delete>
		
		<java classname="org.ajdeveloppement.updater.tools.ChangeLogEditor"
			classpath="lib/ajcommons.jar"
			fork="yes">
			<arg value="packager/changelog.xml"/>
		</java>

		<!--Copie des ressources du projet-->
		<copy todir="${projet.pack.dir}" >
			<fileset dir="." >
				<include name="config/**"/>
				<include name="lang/**"/>
				<include name="lib/**"/>
				<include name="documentation/**"/>
				<include name="ressources/**"/>
				<include name="src/**"/>
				<!--exclu les réference subversion -->
				<exclude name="**/.svn*" />
				<exclude name="ressources/states/**"/>
				<exclude name="ressources/repositories/**"/>
				<exclude name="ressources/sql/importResultArc.sql"/>
				<exclude name="config/ffta.properties" />
				<exclude name="ressources/templates/scriptext/**"/>
			</fileset>
		</copy>
		
		<copy todir="${projet.pack.dir}" >
			<fileset dir="." >
				<include name="ressources/repositories/ConcoursJeunes.xml"/>
			</fileset>
		</copy>

		<!--Copie et commpression des états -->
		<copy todir="${projet.pack.dir}" >
			<fileset dir="." >
				<include name="ressources/states/*.xml"/>
				<include name="ressources/states/*.properties"/>
			</fileset>
		</copy>

		<for param="state">
		    <dirset dir=".">
		    	<include name="ressources/states/**"/>
		    	<exclude name="ressources/states"/>
		    </dirset>
			<sequential>
				<if>
					<equals arg1="${isWindows}" arg2="true" />
					<then>
						<propertyregex override="yes"
					    	property="statename"  input="@{state}"
					    	regexp=".*\\([^\\]*)" replace="\1"/>
					</then>
					<else>
						<propertyregex override="yes"
							property="statename"  input="@{state}"
							regexp=".*/([^/]*)" replace="\1" />
					</else>
				</if>
				<zip destfile="${projet.pack.dir}/ressources/states/${statename}.zip"
					basedir="ressources/states/${statename}" />
			</sequential>
		</for>


		<!--Ajoute les ressources suplémentaires au pack-->
		<copy todir="${projet.pack.dir}">
			<fileset dir="packager" >
				<include name="*.txt" />
			</fileset>
		</copy>

		<replace 
		    file="${projet.pack.dir}/Readme.txt"
			propertyFile="packager/version.properties">
			<replacefilter 
			    token="@version.numero@" 
			    property="version.numero"/>
		</replace>

	</target>
	
	<pathconvert property="classpathProp" refid="classpath"/>

	<target name="compile" depends="pack_stage1">

		<mkdir dir="${projet.pack.dir}/bin" />
		
		<echo message="basedir : ${basedir} " />
		<echo message="classpath : ${classpathProp} " />
		<echo message="classpath.name : ${classpath.name} " />

		<javac srcdir="${projet.pack.dir}/src/" destdir="${projet.pack.dir}/bin"
			optimize="on"
			encoding="UTF-8"
			nowarn="on"
			debug="true"
			source="17"
			target="17"
			classpathref="classpath"
			includeantruntime="false">
		</javac>

		<copy todir="${projet.pack.dir}/bin">
			<fileset dir="${projet.pack.dir}/src" >
				<include name="**/*.properties" />
				<include name="**/*.xml" />
				<include name="**/*.png" />
				<include name="**/*.gif" />
			</fileset>
		</copy>
	</target>

	<target name="jar" depends="compile">
		
		<manifest file="${projet.pack.dir}/MANIFEST.MF" mode="update">
		    <attribute name="Main-Class" value="org.ajdeveloppement.concours.Main"/>
			<attribute name="Class-Path" value="lib/ConcoursJeunes-core.jar ${classpath.name}"/>
			<attribute name="SplashScreen-Image" value="Logo.png" />
        </manifest>
		<jar jarfile="${projet.pack.dir}/ConcoursJeunes.jar"
			manifest="${projet.pack.dir}/MANIFEST.MF">

			<fileset dir="${projet.pack.dir}/bin">
				<include name="org/ajdeveloppement/concours/Main*" />
				<include name="org/ajdeveloppement/concours/ui/**" />
			</fileset>
			<fileset dir="${projet.pack.dir}/ressources">
				<include name="Logo.png"/>
			</fileset>
		</jar>
		<jar jarfile="${projet.pack.dir}/lib/ConcoursJeunes-core.jar"
			manifest="${projet.pack.dir}/MANIFEST.MF">

			<fileset dir="${projet.pack.dir}/bin">
				<include name="**/**" />
				<exclude name="org/concoursjeunes/plugins/**" />
				<exclude name="org/ajdeveloppement/concours/plugins/**" />
				<exclude name="org/concoursjeunes/webservices/**" />
				<exclude name="org/ajdeveloppement/concours/Main*" />
				<exclude name="org/ajdeveloppement/concours/ui/**" />
			</fileset>
			<fileset dir="${projet.pack.dir}/bin">
				<include name="org/concoursjeunes/plugins/*.*" />
			</fileset>
		</jar>
	</target>

	<target name="revisions" description="revisions">
		<taskdef name="revisionscreator"
			classname="org.ajdeveloppement.updater.ant.RevisionsCreator"
			classpathref="classpath">
		</taskdef>

		<revisionscreator
				revisionpath="${projet.pack.dir}/revision.xml.gz"
				reposname="ConcoursJeunes"
				changelogXML="packager/changelog.xml"
				changelogTXT="${projet.pack.dir}/changelog.txt"
				keystorepath="${projet.keystorepath}"
				keystorepassword="${projet.keystorepassword}"
				signkeysalias="${projet.signkeyalias}"
				signkeysaliaspassword="${projet.signkeyaliaspassword}"
			>
			<fileset dir="${projet.pack.dir}">
				<include name="config/**"/>
				<include name="lang/**"/>
				<include name="lib/**"/>
				<include name="ressources/**"/>
				<include name="documentation/**"/>
				<include name="ConcoursJeunes.jar"/>
				<include name="*.txt"/>
				<include name="*.pack"/>
	
				<exclude name="*-filelist.txt"/>
				<exclude name="lib/js*"/>
			</fileset>
			<keysandcerts dir="${projet.pack.dir}/ressources/security/">
				<include name="certs/**" />
			</keysandcerts>
		</revisionscreator>
	</target>
	
	<target name="makelinuxtargz">
		<mkdir dir="${projet.pack.dir}/linux/tar" />
		
		<copy todir="${projet.pack.dir}/linux/tar/usr/lib/ConcoursJeunes/" >
			<fileset dir="${projet.pack.dir}" >
				<include name="config/**"/>
				<include name="lang/**"/>
				<include name="lib/**"/>
				<include name="ressources/**"/>
				<include name="documentation/**"/>
				<include name="ConcoursJeunes.jar"/>
				<include name="*.txt"/>
				
				<exclude name="lib/js*"/>
			</fileset>
		</copy>
		
		<for param="plugin">
		    <dirset dir="${projet.pack.dir}/plugins/">
		    	<include name="*"/>
		    	<exclude name="FFTAImport"/>
		    	<exclude name="ResultArcImport"/>
		    	<exclude name="ScriptExt"/>
		    </dirset>
			<sequential>
				<copy todir="${projet.pack.dir}/linux/tar/usr/lib/ConcoursJeunes" >
					<fileset dir="@{plugin}" >
						<include name="**/**"/>
						
						<exclude name="revision.xml.gz"/>
					</fileset>
				</copy>
			</sequential>
		</for>

		<copy todir="${projet.pack.dir}/linux/tar">
			<fileset dir="packager/linux/">
				<include name="**/*" />
				<exclude name="*.spec" />
				<exclude name="debian" />
			</fileset>
		</copy>
		
		<replace 
		    file="${projet.pack.dir}/linux/tar/usr/share/applications/ConcoursJeunes.desktop"
			propertyFile="packager/version.properties">
			<replacefilter 
		    token="@version.name@" 
		    property="version.name" />
			<replacefilter 
		    token="@version.numero@" 
		    property="version.numero" />
			<replacefilter 
		    token="@fr.summary@" 
		    property="fr.summary" />
			<replacefilter 
		    token="@en.summary@" 
		    property="en.summary" />
		</replace>
		
		<tar tarfile="${projet.pack.dir}/linux/${version.name}-${version.numero}.tar">
			<tarfileset dir="${projet.pack.dir}/linux/tar" >
				<include name="usr/**" />
				<include name="var/**" />
				<include name="etc/**" />
				<include name="Makefile" />
			</tarfileset>
		</tar>
		<gzip zipfile="${projet.pack.dir}/linux/${version.name}-${version.numero}.tar.gz" src="${projet.pack.dir}/linux/${version.name}-${version.numero}.tar"/>
		<delete file="${projet.pack.dir}/linux/${version.name}-${version.numero}.tar" />
		<delete includeemptydirs="true">
			<fileset dir="${projet.pack.dir}/linux/tar" includes="**"/>
		</delete>
	</target>

	<target name="makerpm" if="rpmAvailable">

		<mkdir dir="${projet.pack.dir}/linux/rpm" />
		<property name="rpm.pack.path" location="${projet.pack.dir}/linux/rpm" />

		<mkdir dir="${rpm.pack.path}/SOURCES/" />
		<mkdir dir="${rpm.pack.path}/BUILD/" />
		<mkdir dir="${rpm.pack.path}/RPMS/" />
		<delete includeemptydirs="true">
			<fileset dir="${rpm.pack.path}/SOURCES/" includes="**/*"/>
			<fileset dir="${rpm.pack.path}/BUILD/" includes="**/*"/>
			<fileset dir="${rpm.pack.path}/RPMS/" includes="**/*"/>
		</delete>
		
		<copy todir="${rpm.pack.path}/SOURCES" >
			<fileset dir="${projet.pack.dir}/linux/">
				<include name="${version.name}-${version.numero}.tar.gz" />
			</fileset>
		</copy>

		<copy todir="${rpm.pack.path}/SPECS" >
			<fileset dir="packager/linux/">
				<include name="ConcoursJeunes.spec" />
			</fileset>
		</copy>

		<replace 
		    file="${rpm.pack.path}/SPECS/ConcoursJeunes.spec"
			propertyFile="packager/version.properties">
			<replacefilter 
		    token="@version.name@" 
		    property="version.name" />
			<replacefilter 
		    token="@version.numero@" 
		    property="version.numero" />
			<replacefilter 
		    token="@version.release@" 
		    property="version.release" />
			<replacefilter 
		    token="@version.url@" 
		    property="version.url" />
			<replacefilter 
		    token="@fr.summary@" 
		    property="fr.summary" />
			<replacefilter 
		    token="@fr.description@" 
		    property="fr.description" />
			<replacefilter 
		    token="@en.summary@" 
		    property="en.summary" />
			<replacefilter 
		    token="@en.description@" 
		    property="en.description" />
		</replace>

		<rpm specFile="ConcoursJeunes.spec" topDir="${rpm.pack.path}/" cleanBuildDir="true" />
	</target>
	
	<target name="makedeb" if="dpkgAvailable">
		<exec executable="packager/makedeb.sh" os="Linux">
			<env key="VERSION" value="${version.numero}"/>
			<env key="RELEASE" value="${version.release}"/>
		</exec>
	</target>
	
	<target name="makensissetup" if="nsisAvailable">
		<taskdef name="nsis" classname="net.sf.nsisant.Task">
	        <classpath location="packager/nsisant-1.2.jar"/>
	    </taskdef>
		
		<mkdir dir="${projet.pack.dir}/windows" />
		
		<copy todir="${projet.pack.dir}/windows/" >
			<fileset dir="packager/windows" >
				<include name="**/**"/>
			</fileset>
		</copy>
		
		<get dest="packager/windows/openjdk-17+35_windows-x64_bin.zip" src="hhttps://download.java.net/openjdk/jdk17/ri/openjdk-17+35_windows-x64_bin.zip"/>
		<unzip src="${projet.pack.dir}/windows/openjdk-17+35_windows-x64_bin.zip" dest="${projet.pack.dir}/windows/" />
		
		<nsis script="packager/setup.nsi" verbosity="4">
			<define name="VERSION" value="${version.numero}"/>
			<define name="OUT_FILE" value="windows/setup-${version.name}-${version.numero}.exe"/>
			<define name="WORKING_DIR" value="../${projet.pack.dir}"/>
		</nsis>
	</target>
	
	<target name="auto-pack"
		description="Pack en fonction du système">
		<antcall target="jar" />
		<antcall target="pack-ConcoursJeunesUpdate" />
		<antcall target="pack-PhoenixPlugin" />
		<antcall target="pack-BackupRestorePlugin" />
		<antcall target="pack-FFTAImport" />
		<antcall target="pack-ScriptExt" />
		<antcall target="revisions" />
		<antcall target="windows" />
		<antcall target="linux" />
	</target>
	

	<target name="windows" description="Pack Windows" if="isWindows">
		<antcall target="pack-ResultArcImport" />
		<antcall target="makensissetup" />
	</target>
	<target name="linux" description="Pack Linux" if="isLinux">
		<antcall target="makelinuxtargz" />
		<antcall target="makerpm" />
		<antcall target="makedeb" />
	</target>
	
	<!-- La target all-system ne peut fonctionner que sur un linux de type debian, ubuntu car c'est le seul à disposer à la fois des
	outils de construction deb, rpm et nsis. Les sytstème windows ne supporte que nsis, les red-hat like que rpm -->
	<target name="all-system" description="Compilation Multi-systeme">
		<antcall target="jar" />
		<antcall target="pack-ConcoursJeunesUpdate" />
		<antcall target="pack-PhoenixPlugin" />
		<antcall target="pack-ResultArcImport" />
		<antcall target="pack-FFTAImport" />
		<antcall target="pack-BackupRestorePlugin" />
		<antcall target="pack-ScriptExt" />
		<antcall target="revisions" />
		<antcall target="makensissetup" />
		<antcall target="makelinuxtargz" />
		<antcall target="makerpm" />
		<antcall target="makedeb" />
	</target>
	
	<target name="deploy" description="deploi les fichier sur le serveur de mise à jour">
		<copy todir="../ConcoursJeunes.org/update/" >
			<fileset dir="pack" >
				<include name="config/**"/>
				<include name="lang/**"/>
				<include name="lib/**"/>
				<include name="plugins/**"/>
				<include name="documentation/**"/>
				<include name="ressources/**"/>
				<include name="ConcoursJeunes.jar"/>
				<include name="revision.xml.gz"/>
				<include name="*.txt"/>
			</fileset>
		</copy>
	</target>

</project>